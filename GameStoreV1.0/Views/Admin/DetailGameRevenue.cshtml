@model IEnumerable<AdminRevenueViewModel>
@{
    ViewData["Title"] = "DetailGameRevenue";

    Layout = "_ClearLayout";

var uniqueDates = Model.Select(sr => sr.date).Distinct().OrderBy(d => d);


    var dateNames = new string[uniqueDates.Count()];
    int i = 0;

    foreach (var date in uniqueDates)
    {

        dateNames[i] = date.ToString("yyyy-MM-dd");
        i++;
    }

    var dailyRevenue = new int[uniqueDates.Count()];
    for (int j = 0; j < uniqueDates.Count(); j++)

    {

        var dateRevenue = Model.Where(sr => sr.date == uniqueDates.ElementAt(j)).Sum(sr => sr.adMoneyPlus);

        dailyRevenue[j] = (int)dateRevenue;

    }

}

<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<!-- Thêm jQuery -->
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<!-- Thêm DataTables và DataTables Bootstrap -->
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>

<script>
    $(document).ready(function () {
        // Khởi tạo DataTable và kích hoạt tính năng tìm kiếm
        $('#example').DataTable({
            searching: true // Kích hoạt tính năng tìm kiếm
        });
    });
</script>



<section class="youplay-banner banner-top youplay-banner-parallax small">
    <div class="image" data-speed="0.4">
        <img src="/upload/img/@Model.FirstOrDefault()?.picture" alt class="jarallax-img">
    </div>
    <div class="info">
        <div>
            <div class="container">

                <h1 class="h1 stroke-text">@Model.FirstOrDefault()?.gameName</h1>


                <a class="btn" asp-action="Revenue">Return</a>
                <br>
            </div>
        </div>
    </div>

</section>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<br>
<br>
<br>
<br>
<br>
<div class="container">
    <canvas id="myChart"></canvas>
    <br>
    <h4 style="color: red;" id="dateErrorMess"></h4>
    <div class="row">
        <div class="col-md-3">
            <input type="date" id="startDate" class="form-control" placeholder="Start Date">
        </div>
        <div class="col-md-3">
            <input type="date" id="endDate" class="form-control" placeholder="End Date">
        </div>
        <div class="col-md-2">
            <button id="updateChart" class="btn btn-primary" onclick="updateChart()">Update Chart</button>
        </div>
    </div>
    <br>
        <div class="row">
            <h4 class="col-md-1">Total: </h4>
            <h4 id="totalRev">0</h4>
        </div>
</div>

<script>
    // Lấy tham chiếu của canvas
    let ctx = document.getElementById('myChart').getContext('2d');

    // Khai báo dữ liệu cho biểu đồ
    const labels = @Html.Raw(Json.Serialize(dateNames)); // Sử dụng Raw để serialize mảng JavaScript
    var check = @Html.Raw(Json.Serialize(dailyRevenue))

        console.log(labels);
    console.log(check);

    const labelCheckMap = new Map();

    // Lặp qua mảng labels để tính tổng các giá trị check có cùng label
    for (let i = 0; i < labels.length; i++) {
        const label = labels[i];
        const currentCheck = check[i];
        if (labelCheckMap.has(label)) {
            labelCheckMap.set(label, labelCheckMap.get(label) + currentCheck);
        } else {
            labelCheckMap.set(label, currentCheck);
        }
    }

    // Tạo mảng labels không trùng lặp và mảng check tương ứng với tổng các giá trị
    const uniqueLabels = Array.from(labelCheckMap.keys());
    const uniqueCheck = Array.from(labelCheckMap.values());

    console.log("Danh sách labels không trùng lặp:", uniqueLabels);
    console.log("Danh sách check có index tương ứng sau khi cộng:", uniqueCheck);

    const data = {
        labels: uniqueLabels,
        datasets: [
            {
                label: 'Daily Admin Revenue',
                data: uniqueCheck, // Sử dụng Raw để serialize mảng JavaScript
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }
        ]
    };

    // Cấu hình biểu đồ
    const config = {
        type: 'bar',
        data: data,
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'Daily Admin Revenue'
                }
            }
        },
    };

    // Tạo biểu đồ
    var myChart = new Chart(ctx, config);
</script>
<br>
<br>
<br>
<br>

<script>
    function updateChart() {
        var startDateString = document.getElementById('startDate').value;
        var endDateString = document.getElementById('endDate').value;


        var startDate = new Date(startDateString);
        var endDate = new Date(endDateString);

        var Model = @Html.Raw(Json.Serialize(Model));

        var selectedData = Model.map(item => {

            //console.log("test: " + item.date);
            var temp = item.year + "-" + item.month.toString().padStart(2, '0') + "-" + item.day.toString().padStart(2, '0')
            console.log("test: " + temp);
            var date = new Date(item.date.substring(0, 10));
            return {
                date: temp, // Lấy ngày theo định dạng Năm-Tháng-Ngày
                adMoneyPlus: item.adMoneyPlus
            };
        });

        var testData = selectedData;


        var dates = [];
        var adMoneyPlus = [];

        selectedData.forEach(item => {
            dates.push(item.date);
            adMoneyPlus.push(item.adMoneyPlus);
        });


        var errorMess = document.getElementById('dateErrorMess');

        // Kiểm tra hợp lệ của startDate và endDate
        if (!startDate || isNaN(startDate.getTime())) {
            errorMess.textContent = "You must enter start date to begin to search";
            return
        }

        if (!endDate || isNaN(endDate.getTime())) {
            errorMess.textContent = "You must enter end date to begin to search";
            return
        }

        // Khai báo startDate và endDate (chú ý định dạng của hai biến này)

        var totaREv = 0;

        // Tạo mảng riêng cho các ngày và doanh thu tương ứng
        var filteredDates = [];
        var filteredAdMoneyPlus = [];

        // Lặp qua từng phần tử trong mảng selectedData
        for (var i = 0; i < selectedData.length; i++) {
            var currentItem = selectedData[i];
            var a = parseInt(currentItem.date.split("-").join(""));
            var b = parseInt(startDateString.split("-").join(""));
            var c = parseInt(endDateString.split("-").join(""));

    @* console.log("currentItem.date: " + a);
                console.log("startDateString: " + b);
                console.log("endDateString: " + c); *@

            // Kiểm tra nếu ngày nằm trong khoảng từ startDate đến endDate
            if (a >= b && a <= c) {
                // Thêm ngày và doanh thu tương ứng vào mảng filteredDates và filteredAdMoneyPlus
                filteredDates.push(currentItem.date);
                filteredAdMoneyPlus.push(currentItem.adMoneyPlus);
                totaREv += currentItem.adMoneyPlus;
            }
        }


        const labelCheckMap = new Map();

        // Lặp qua mảng labels để tính tổng các giá trị check có cùng label
        for (let i = 0; i < filteredDates.length; i++) {
            const label = filteredDates[i];
            const currentCheck = filteredAdMoneyPlus[i];
            if (labelCheckMap.has(label)) {
                labelCheckMap.set(label, labelCheckMap.get(label) + currentCheck);
            } else {
                labelCheckMap.set(label, currentCheck);
            }
        }

        // Tạo mảng labels không trùng lặp và mảng check tương ứng với tổng các giá trị
        const uniqueLabels = Array.from(labelCheckMap.keys());
        const uniqueCheck = Array.from(labelCheckMap.values());

        console.log("Danh sách labels không trùng lặp:", uniqueLabels);
        console.log("Danh sách check có index tương ứng sau khi cộng:", uniqueCheck);



        if (startDate > endDate) {
            errorMess.textContent = "Start date cannot be greater than end date";
            return;
        } else if (filteredAdMoneyPlus.length === 0 || filteredDates.length === 0) {
            errorMess.textContent = "No revenue found";
            return;
        } else {
            errorMess.textContent = "";
        }

        document.getElementById("totalRev").textContent = totaREv;

        // Cập nhật dữ liệu của biểu đồ
        myChart.data.datasets[0].data = uniqueCheck;
        myChart.data.labels = uniqueLabels;

        // Vẽ lại biểu đồ
        myChart.update();
    }
</script>
<style>
        #example_wrapper{
            width: 80%;
        }
        .row.dt-row {
            height: 300px;
            overflow-x: auto;
        }
</style>

<div style="display: flex; justify-content: center; margin: 3%;">
    <table class="table table-bordered table-hover table-white" style="width: 100%;" id="example">
        <thead>
            <tr class="font-weight-bold">
                <th>ID</th>
                <th>Name</th>
                <th>Date</th>
                <th>Customer</th>
                <th>Game Price</th>
                <th>Seller Received</th>
                <th>Admin Received</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.GID</td>
                    <td>@item.gameName</td>
                    <td>@item.date.ToString("yyyy-MM-dd")</td>
                    <td>@item.cusName</td>
                    <td>@item.gamePrice</td>
                    <td>@item.sellerMoneyPlus</td>
                    <td>@item.adMoneyPlus</td>
                </tr>
            }
        </tbody>
    </table>
</div>